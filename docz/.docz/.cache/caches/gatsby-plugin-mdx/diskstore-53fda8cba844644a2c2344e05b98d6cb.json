{"expireTime":9007200832285624000,"key":"gatsby-plugin-mdx-entire-payload-d16cb5b91d2335fcd69abc3419a06ab0-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/home/jeremie/Workspaces/webstorm/projects/harmony/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":134,"offset":135},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":137},"end":{"line":5,"column":29,"offset":165},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"HarmonyJS Server","position":{"start":{"line":8,"column":3,"offset":170},"end":{"line":8,"column":19,"offset":186},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":168},"end":{"line":8,"column":19,"offset":186},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"@harmonyjs/server","position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":10,"column":20,"offset":207},"indent":[]}},{"type":"text","value":" handles the creation and runtime of a Node webserver. Under the hood, it uses HapiJS, but there is no\nneed to know HapiJS in order to start using HarmonyJS.","position":{"start":{"line":10,"column":20,"offset":207},"end":{"line":11,"column":55,"offset":364},"indent":[1]}}],"position":{"start":{"line":10,"column":1,"offset":188},"end":{"line":11,"column":55,"offset":364},"indent":[1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":13,"column":4,"offset":369},"end":{"line":13,"column":9,"offset":374},"indent":[]}}],"position":{"start":{"line":13,"column":2,"offset":367},"end":{"line":13,"column":11,"offset":376},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":13,"column":11,"offset":376},"end":{"line":13,"column":12,"offset":377},"indent":[]}},{"type":"link","title":null,"url":"https://hapi.dev/","children":[{"type":"text","value":"HapiJS","position":{"start":{"line":13,"column":13,"offset":378},"end":{"line":13,"column":19,"offset":384},"indent":[]}}],"position":{"start":{"line":13,"column":12,"offset":377},"end":{"line":13,"column":39,"offset":404},"indent":[]}},{"type":"text","value":" knowledge is necessary to write your own ","position":{"start":{"line":13,"column":39,"offset":404},"end":{"line":13,"column":81,"offset":446},"indent":[]}},{"type":"link","title":null,"url":"/plugins/controllers","children":[{"type":"text","value":"Controller Plugins","position":{"start":{"line":13,"column":82,"offset":447},"end":{"line":13,"column":100,"offset":465},"indent":[]}}],"position":{"start":{"line":13,"column":81,"offset":446},"end":{"line":13,"column":123,"offset":488},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":366},"end":{"line":13,"column":124,"offset":489},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":366},"end":{"line":13,"column":124,"offset":489},"indent":[]}},{"type":"jsx","value":"<br />","position":{"start":{"line":15,"column":1,"offset":491},"end":{"line":15,"column":7,"offset":497},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"Server","position":{"start":{"line":17,"column":4,"offset":502},"end":{"line":17,"column":12,"offset":510},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":499},"end":{"line":17,"column":12,"offset":510},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"@harmonyjs/server","position":{"start":{"line":19,"column":1,"offset":512},"end":{"line":19,"column":20,"offset":531},"indent":[]}},{"type":"text","value":" only exports one element, its default export: the ","position":{"start":{"line":19,"column":20,"offset":531},"end":{"line":19,"column":71,"offset":582},"indent":[]}},{"type":"inlineCode","value":"Server","position":{"start":{"line":19,"column":71,"offset":582},"end":{"line":19,"column":79,"offset":590},"indent":[]}},{"type":"text","value":" constructor.","position":{"start":{"line":19,"column":79,"offset":590},"end":{"line":19,"column":92,"offset":603},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":512},"end":{"line":19,"column":92,"offset":603},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This constructor allows us to create a ","position":{"start":{"line":21,"column":1,"offset":605},"end":{"line":21,"column":40,"offset":644},"indent":[]}},{"type":"inlineCode","value":"Server","position":{"start":{"line":21,"column":40,"offset":644},"end":{"line":21,"column":48,"offset":652},"indent":[]}},{"type":"text","value":" instance, which can be configured to expose our application's webserver.\nA ","position":{"start":{"line":21,"column":48,"offset":652},"end":{"line":22,"column":3,"offset":728},"indent":[1]}},{"type":"inlineCode","value":"Server","position":{"start":{"line":22,"column":3,"offset":728},"end":{"line":22,"column":11,"offset":736},"indent":[]}},{"type":"text","value":" instance only has two publicly available methods: the constructor itself, and a ","position":{"start":{"line":22,"column":11,"offset":736},"end":{"line":22,"column":92,"offset":817},"indent":[]}},{"type":"inlineCode","value":"start","position":{"start":{"line":22,"column":92,"offset":817},"end":{"line":22,"column":99,"offset":824},"indent":[]}},{"type":"text","value":" function.","position":{"start":{"line":22,"column":99,"offset":824},"end":{"line":22,"column":109,"offset":834},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":605},"end":{"line":22,"column":109,"offset":834},"indent":[1]}},{"type":"jsx","value":"<br />","position":{"start":{"line":24,"column":1,"offset":836},"end":{"line":24,"column":7,"offset":842},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"Server::new(","position":{"start":{"line":26,"column":5,"offset":848},"end":{"line":26,"column":19,"offset":862},"indent":[]}},{"type":"link","title":null,"url":"#serverconfig","children":[{"type":"inlineCode","value":"ServerConfig","position":{"start":{"line":26,"column":20,"offset":863},"end":{"line":26,"column":34,"offset":877},"indent":[]}}],"position":{"start":{"line":26,"column":19,"offset":862},"end":{"line":26,"column":50,"offset":893},"indent":[]}},{"type":"inlineCode","value":": config): Server","position":{"start":{"line":26,"column":50,"offset":893},"end":{"line":26,"column":69,"offset":912},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":844},"end":{"line":26,"column":69,"offset":912},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constructor to create a new ","position":{"start":{"line":28,"column":1,"offset":914},"end":{"line":28,"column":29,"offset":942},"indent":[]}},{"type":"inlineCode","value":"Server","position":{"start":{"line":28,"column":29,"offset":942},"end":{"line":28,"column":37,"offset":950},"indent":[]}},{"type":"text","value":" instance. It takes a ","position":{"start":{"line":28,"column":37,"offset":950},"end":{"line":28,"column":59,"offset":972},"indent":[]}},{"type":"link","title":null,"url":"#serverconfig","children":[{"type":"inlineCode","value":"ServerConfig","position":{"start":{"line":28,"column":60,"offset":973},"end":{"line":28,"column":74,"offset":987},"indent":[]}}],"position":{"start":{"line":28,"column":59,"offset":972},"end":{"line":28,"column":90,"offset":1003},"indent":[]}},{"type":"text","value":" object as parameter\nto configure the instance.","position":{"start":{"line":28,"column":90,"offset":1003},"end":{"line":29,"column":27,"offset":1050},"indent":[1]}}],"position":{"start":{"line":28,"column":1,"offset":914},"end":{"line":29,"column":27,"offset":1050},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"No further initialization steps are executed. To launch the server, use the ","position":{"start":{"line":31,"column":1,"offset":1052},"end":{"line":31,"column":77,"offset":1128},"indent":[]}},{"type":"inlineCode","value":"Server::start","position":{"start":{"line":31,"column":77,"offset":1128},"end":{"line":31,"column":92,"offset":1143},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":31,"column":92,"offset":1143},"end":{"line":31,"column":100,"offset":1151},"indent":[]}}],"position":{"start":{"line":31,"column":1,"offset":1052},"end":{"line":31,"column":100,"offset":1151},"indent":[]}},{"type":"jsx","value":"<b style={{display: \"block\", marginBottom: \"-1.5rem\" }}>Sample usage</b>","position":{"start":{"line":33,"column":1,"offset":1153},"end":{"line":33,"column":73,"offset":1225},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import Server from '@harmonyjs/server'\n\n// Initialize a new Server instance\nconst server = new Server({\n    endpoint: {\n        host: '0.0.0.0',\n        port: 80,\n    },\n})","position":{"start":{"line":35,"column":1,"offset":1227},"end":{"line":45,"column":4,"offset":1409},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"Server::start(): Promise<boolean>","position":{"start":{"line":47,"column":5,"offset":1415},"end":{"line":47,"column":40,"offset":1450},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1411},"end":{"line":47,"column":40,"offset":1450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Initialization function launching the webserver.","position":{"start":{"line":49,"column":1,"offset":1452},"end":{"line":49,"column":49,"offset":1500},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1452},"end":{"line":49,"column":49,"offset":1500},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This function returns a ","position":{"start":{"line":51,"column":1,"offset":1502},"end":{"line":51,"column":25,"offset":1526},"indent":[]}},{"type":"inlineCode","value":"Promise","position":{"start":{"line":51,"column":25,"offset":1526},"end":{"line":51,"column":34,"offset":1535},"indent":[]}},{"type":"text","value":" which resolves when the server is done loading.","position":{"start":{"line":51,"column":34,"offset":1535},"end":{"line":51,"column":82,"offset":1583},"indent":[]}}],"position":{"start":{"line":51,"column":1,"offset":1502},"end":{"line":51,"column":82,"offset":1583},"indent":[]}},{"type":"jsx","value":"<b style={{display: \"block\", marginBottom: \"-1.5rem\" }}>Sample usage</b>","position":{"start":{"line":53,"column":1,"offset":1585},"end":{"line":53,"column":73,"offset":1657},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"import Server from '@harmonyjs/server'\n\nasync function run() {\n    // Initialize a new Server instance\n    const server = new Server({\n        endpoint: {\n            host: '0.0.0.0',\n            port: 80,\n        },\n    })\n\n    console.log('Launching the server...')\n\n    // Start our server\n    try {\n        await server.start()\n\n        console.log('Server launched!')\n    }\n    catch (err) {\n        console.log('An error occurred while launching the server')\n        console.error(err)\n    }\n}\n\nrun()","position":{"start":{"line":55,"column":1,"offset":1659},"end":{"line":82,"column":4,"offset":2175},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"inlineCode","value":"ServerConfig","position":{"start":{"line":84,"column":4,"offset":2180},"end":{"line":84,"column":18,"offset":2194},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2177},"end":{"line":84,"column":18,"offset":2194},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":86,"column":1,"offset":2196},"end":{"line":86,"column":5,"offset":2200},"indent":[]}},{"type":"inlineCode","value":"ServerConfig","position":{"start":{"line":86,"column":5,"offset":2200},"end":{"line":86,"column":19,"offset":2214},"indent":[]}},{"type":"text","value":" object allows us to configure the server before running it. Here are the available options:","position":{"start":{"line":86,"column":19,"offset":2214},"end":{"line":86,"column":111,"offset":2306},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2196},"end":{"line":86,"column":111,"offset":2306},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"type ServerConfig = {\n  endpoint?: {\n    host: string,\n    port: number,\n  },\n  authentication?: {\n    secret: string,\n    validate?: (any) => Promise<boolean>,\n  },\n  cluster?: {\n    forks?: {\n      size?: number,\n      header?: string,\n      proxy?: boolean,\n    },\n    redis: boolean | {\n      key?: string,\n      host?: string,\n      port?: number,\n    },\n  },\n  controllers?: Controller[],\n  log?: LogConfig,\n}","position":{"start":{"line":88,"column":1,"offset":2308},"end":{"line":113,"column":4,"offset":2733},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"ServerConfig::endpoint","position":{"start":{"line":115,"column":5,"offset":2739},"end":{"line":115,"column":29,"offset":2763},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2735},"end":{"line":115,"column":29,"offset":2763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The optional endpoint field allows us to choose the host and port to run or server on. Omitting this field will launch\na server on ","position":{"start":{"line":117,"column":1,"offset":2765},"end":{"line":118,"column":13,"offset":2896},"indent":[1]}},{"type":"inlineCode","value":"localhost:3000","position":{"start":{"line":118,"column":13,"offset":2896},"end":{"line":118,"column":29,"offset":2912},"indent":[]}},{"type":"text","value":" by default.","position":{"start":{"line":118,"column":29,"offset":2912},"end":{"line":118,"column":41,"offset":2924},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2765},"end":{"line":118,"column":41,"offset":2924},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"This field takes two subfields, ","position":{"start":{"line":120,"column":1,"offset":2926},"end":{"line":120,"column":33,"offset":2958},"indent":[]}},{"type":"inlineCode","value":"endpoint.host","position":{"start":{"line":120,"column":33,"offset":2958},"end":{"line":120,"column":48,"offset":2973},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":120,"column":48,"offset":2973},"end":{"line":120,"column":53,"offset":2978},"indent":[]}},{"type":"inlineCode","value":"endpoint.port","position":{"start":{"line":120,"column":53,"offset":2978},"end":{"line":120,"column":68,"offset":2993},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":2926},"end":{"line":120,"column":68,"offset":2993},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"ServerConfig::authentication","position":{"start":{"line":122,"column":5,"offset":2999},"end":{"line":122,"column":35,"offset":3029},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":2995},"end":{"line":122,"column":35,"offset":3029},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This optional field handles the built-in JWT-authentication scheme. It has two subfields: ","position":{"start":{"line":124,"column":1,"offset":3031},"end":{"line":124,"column":91,"offset":3121},"indent":[]}},{"type":"inlineCode","value":"authentication.secret","position":{"start":{"line":124,"column":91,"offset":3121},"end":{"line":124,"column":114,"offset":3144},"indent":[]}},{"type":"text","value":", the\nsecret to use to sign the JWT tokens emitted from the application, and ","position":{"start":{"line":124,"column":114,"offset":3144},"end":{"line":125,"column":72,"offset":3221},"indent":[1]}},{"type":"inlineCode","value":"authentication.validate","position":{"start":{"line":125,"column":72,"offset":3221},"end":{"line":125,"column":97,"offset":3246},"indent":[]}},{"type":"text","value":", an optional function\nwhich receives the decoded token before each requests and returns a ","position":{"start":{"line":125,"column":97,"offset":3246},"end":{"line":126,"column":69,"offset":3337},"indent":[1]}},{"type":"inlineCode","value":"Promise","position":{"start":{"line":126,"column":69,"offset":3337},"end":{"line":126,"column":78,"offset":3346},"indent":[]}},{"type":"text","value":" resolving to ","position":{"start":{"line":126,"column":78,"offset":3346},"end":{"line":126,"column":92,"offset":3360},"indent":[]}},{"type":"inlineCode","value":"true","position":{"start":{"line":126,"column":92,"offset":3360},"end":{"line":126,"column":98,"offset":3366},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":126,"column":98,"offset":3366},"end":{"line":126,"column":102,"offset":3370},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":126,"column":102,"offset":3370},"end":{"line":126,"column":109,"offset":3377},"indent":[]}},{"type":"text","value":" to indicate\nwhether the token is considered valid or not.","position":{"start":{"line":126,"column":109,"offset":3377},"end":{"line":127,"column":46,"offset":3435},"indent":[1]}}],"position":{"start":{"line":124,"column":1,"offset":3031},"end":{"line":127,"column":46,"offset":3435},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":129,"column":4,"offset":3440},"end":{"line":129,"column":9,"offset":3445},"indent":[]}}],"position":{"start":{"line":129,"column":2,"offset":3438},"end":{"line":129,"column":11,"offset":3447},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":129,"column":11,"offset":3447},"end":{"line":129,"column":16,"offset":3452},"indent":[]}},{"type":"inlineCode","value":"validate","position":{"start":{"line":129,"column":16,"offset":3452},"end":{"line":129,"column":26,"offset":3462},"indent":[]}},{"type":"text","value":" function is the responsibility of the application and arrives","position":{"start":{"line":129,"column":26,"offset":3462},"end":{"line":129,"column":88,"offset":3524},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3437},"end":{"line":129,"column":89,"offset":3525},"indent":[]}},{"type":"text","value":" after ","position":{"start":{"line":129,"column":89,"offset":3525},"end":{"line":129,"column":96,"offset":3532},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"the signature check","position":{"start":{"line":129,"column":97,"offset":3533},"end":{"line":129,"column":116,"offset":3552},"indent":[]}}],"position":{"start":{"line":129,"column":96,"offset":3532},"end":{"line":129,"column":117,"offset":3553},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3437},"end":{"line":129,"column":117,"offset":3553},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"ServerConfig::cluster","position":{"start":{"line":131,"column":5,"offset":3559},"end":{"line":131,"column":28,"offset":3582},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3555},"end":{"line":131,"column":28,"offset":3582},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The cluster configuration define how the app should handle replication, either locally using Node's forking system, or\nacross multiple machines such as in a Kubernetes environment.","position":{"start":{"line":133,"column":1,"offset":3584},"end":{"line":134,"column":62,"offset":3764},"indent":[1]}}],"position":{"start":{"line":133,"column":1,"offset":3584},"end":{"line":134,"column":62,"offset":3764},"indent":[1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"ServerConfig::cluster::forks","position":{"start":{"line":136,"column":6,"offset":3771},"end":{"line":136,"column":36,"offset":3801},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3766},"end":{"line":136,"column":36,"offset":3801},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":138,"column":1,"offset":3803},"end":{"line":138,"column":5,"offset":3807},"indent":[]}},{"type":"inlineCode","value":"cluster.forks","position":{"start":{"line":138,"column":5,"offset":3807},"end":{"line":138,"column":20,"offset":3822},"indent":[]}},{"type":"text","value":" subfield allows to configure how our application should split across multiple forks.","position":{"start":{"line":138,"column":20,"offset":3822},"end":{"line":138,"column":105,"offset":3907},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3803},"end":{"line":138,"column":105,"offset":3907},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Under the hood, HarmonyJS uses Socket.IO for client->server communication. Forks parameters allow to insure a socket connection\nis always forwarded to the correct server.","position":{"start":{"line":140,"column":1,"offset":3909},"end":{"line":141,"column":43,"offset":4079},"indent":[1]}}],"position":{"start":{"line":140,"column":1,"offset":3909},"end":{"line":141,"column":43,"offset":4079},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It takes three optional parameters:","position":{"start":{"line":143,"column":1,"offset":4081},"end":{"line":143,"column":36,"offset":4116},"indent":[]}}],"position":{"start":{"line":143,"column":1,"offset":4081},"end":{"line":143,"column":36,"offset":4116},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"size","position":{"start":{"line":145,"column":3,"offset":4120},"end":{"line":145,"column":9,"offset":4126},"indent":[]}},{"type":"text","value":": the number of instances to run. If lower than 2, then no forks are created. Defaults to ","position":{"start":{"line":145,"column":9,"offset":4126},"end":{"line":145,"column":99,"offset":4216},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":145,"column":99,"offset":4216},"end":{"line":145,"column":102,"offset":4219},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":145,"column":102,"offset":4219},"end":{"line":145,"column":103,"offset":4220},"indent":[]}}],"position":{"start":{"line":145,"column":3,"offset":4120},"end":{"line":145,"column":103,"offset":4220},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4118},"end":{"line":145,"column":103,"offset":4220},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"header","position":{"start":{"line":146,"column":3,"offset":4223},"end":{"line":146,"column":11,"offset":4231},"indent":[]}},{"type":"text","value":": the header containing the real user IP address. Useful if used behind a proxy. Defaults to ","position":{"start":{"line":146,"column":11,"offset":4231},"end":{"line":146,"column":104,"offset":4324},"indent":[]}},{"type":"inlineCode","value":"'x-forwarded-for'","position":{"start":{"line":146,"column":104,"offset":4324},"end":{"line":146,"column":123,"offset":4343},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":146,"column":123,"offset":4343},"end":{"line":146,"column":124,"offset":4344},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":4223},"end":{"line":146,"column":124,"offset":4344},"indent":[]}}],"position":{"start":{"line":146,"column":1,"offset":4221},"end":{"line":146,"column":124,"offset":4344},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"proxy","position":{"start":{"line":147,"column":3,"offset":4347},"end":{"line":147,"column":10,"offset":4354},"indent":[]}},{"type":"text","value":": tells if the application is running behind a proxy. Defaults to ","position":{"start":{"line":147,"column":10,"offset":4354},"end":{"line":147,"column":76,"offset":4420},"indent":[]}},{"type":"inlineCode","value":"false","position":{"start":{"line":147,"column":76,"offset":4420},"end":{"line":147,"column":83,"offset":4427},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":147,"column":83,"offset":4427},"end":{"line":147,"column":84,"offset":4428},"indent":[]}}],"position":{"start":{"line":147,"column":3,"offset":4347},"end":{"line":147,"column":84,"offset":4428},"indent":[]}}],"position":{"start":{"line":147,"column":1,"offset":4345},"end":{"line":147,"column":84,"offset":4428},"indent":[]}}],"position":{"start":{"line":145,"column":1,"offset":4118},"end":{"line":147,"column":84,"offset":4428},"indent":[1,1]}},{"type":"heading","depth":4,"children":[{"type":"inlineCode","value":"ServerConfig::cluster::redis","position":{"start":{"line":149,"column":6,"offset":4435},"end":{"line":149,"column":36,"offset":4465},"indent":[]}}],"position":{"start":{"line":149,"column":1,"offset":4430},"end":{"line":149,"column":36,"offset":4465},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":151,"column":1,"offset":4467},"end":{"line":151,"column":5,"offset":4471},"indent":[]}},{"type":"inlineCode","value":"cluster.redis","position":{"start":{"line":151,"column":5,"offset":4471},"end":{"line":151,"column":20,"offset":4486},"indent":[]}},{"type":"text","value":" subfield allows to configure our application for working on a clustered environment, such as Kubernetes.","position":{"start":{"line":151,"column":20,"offset":4486},"end":{"line":151,"column":125,"offset":4591},"indent":[]}}],"position":{"start":{"line":151,"column":1,"offset":4467},"end":{"line":151,"column":125,"offset":4591},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Under the hood, HarmonyJS uses Socket.IO for client->server communication. Redis parameters allow to insure that messages\nare spread to all clients, whichever the emitting server, and vice-versa.","position":{"start":{"line":153,"column":1,"offset":4593},"end":{"line":154,"column":74,"offset":4788},"indent":[1]}}],"position":{"start":{"line":153,"column":1,"offset":4593},"end":{"line":154,"column":74,"offset":4788},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It takes three optional parameters:","position":{"start":{"line":156,"column":1,"offset":4790},"end":{"line":156,"column":36,"offset":4825},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":4790},"end":{"line":156,"column":36,"offset":4825},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"key","position":{"start":{"line":158,"column":3,"offset":4829},"end":{"line":158,"column":8,"offset":4834},"indent":[]}},{"type":"text","value":": the identifier of the Redis sync cache. Defaults to ","position":{"start":{"line":158,"column":8,"offset":4834},"end":{"line":158,"column":62,"offset":4888},"indent":[]}},{"type":"inlineCode","value":"'harmony'","position":{"start":{"line":158,"column":62,"offset":4888},"end":{"line":158,"column":73,"offset":4899},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":158,"column":73,"offset":4899},"end":{"line":158,"column":75,"offset":4901},"indent":[]}},{"type":"jsx","value":"<br/>","position":{"start":{"line":158,"column":75,"offset":4901},"end":{"line":158,"column":80,"offset":4906},"indent":[]}},{"type":"text","value":"\nUse this key if you intend to run multiple HarmonyJS applications on the same cluster or using the same Redis server.","position":{"start":{"line":158,"column":80,"offset":4906},"end":{"line":159,"column":118,"offset":5024},"indent":[1]}}],"position":{"start":{"line":158,"column":3,"offset":4829},"end":{"line":159,"column":118,"offset":5024},"indent":[1]}}],"position":{"start":{"line":158,"column":1,"offset":4827},"end":{"line":159,"column":118,"offset":5024},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"host","position":{"start":{"line":160,"column":3,"offset":5027},"end":{"line":160,"column":9,"offset":5033},"indent":[]}},{"type":"text","value":": the hostname on which to access the Redis server. Defaults to ","position":{"start":{"line":160,"column":9,"offset":5033},"end":{"line":160,"column":73,"offset":5097},"indent":[]}},{"type":"inlineCode","value":"'localhost'","position":{"start":{"line":160,"column":73,"offset":5097},"end":{"line":160,"column":86,"offset":5110},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":160,"column":86,"offset":5110},"end":{"line":160,"column":87,"offset":5111},"indent":[]}}],"position":{"start":{"line":160,"column":3,"offset":5027},"end":{"line":160,"column":87,"offset":5111},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":5025},"end":{"line":160,"column":87,"offset":5111},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"port","position":{"start":{"line":161,"column":3,"offset":5114},"end":{"line":161,"column":9,"offset":5120},"indent":[]}},{"type":"text","value":": the port on which the Redis server is running. Defaults to ","position":{"start":{"line":161,"column":9,"offset":5120},"end":{"line":161,"column":70,"offset":5181},"indent":[]}},{"type":"inlineCode","value":"6379","position":{"start":{"line":161,"column":70,"offset":5181},"end":{"line":161,"column":76,"offset":5187},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":161,"column":76,"offset":5187},"end":{"line":161,"column":77,"offset":5188},"indent":[]}}],"position":{"start":{"line":161,"column":3,"offset":5114},"end":{"line":161,"column":77,"offset":5188},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":5112},"end":{"line":161,"column":77,"offset":5188},"indent":[]}}],"position":{"start":{"line":158,"column":1,"offset":4827},"end":{"line":161,"column":77,"offset":5188},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"ServerConfig::controllers","position":{"start":{"line":163,"column":5,"offset":5194},"end":{"line":163,"column":32,"offset":5221},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":5190},"end":{"line":163,"column":32,"offset":5221},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The controllers array contains a list of Controllers. Controllers are HarmonyJS plugins allowing to describe how to handle\nspecific routes, such as serving a static directory, routing to an SPA or exposing a GraphQL endpoint.","position":{"start":{"line":165,"column":1,"offset":5223},"end":{"line":166,"column":103,"offset":5448},"indent":[1]}}],"position":{"start":{"line":165,"column":1,"offset":5223},"end":{"line":166,"column":103,"offset":5448},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"To find more information about Controllers, refer to ","position":{"start":{"line":168,"column":1,"offset":5450},"end":{"line":168,"column":54,"offset":5503},"indent":[]}},{"type":"link","title":null,"url":"/plugins/controllers","children":[{"type":"text","value":"their documentation","position":{"start":{"line":168,"column":55,"offset":5504},"end":{"line":168,"column":74,"offset":5523},"indent":[]}}],"position":{"start":{"line":168,"column":54,"offset":5503},"end":{"line":168,"column":97,"offset":5546},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":168,"column":97,"offset":5546},"end":{"line":168,"column":98,"offset":5547},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":5450},"end":{"line":168,"column":98,"offset":5547},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"inlineCode","value":"ServerConfig::log","position":{"start":{"line":170,"column":5,"offset":5553},"end":{"line":170,"column":24,"offset":5572},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":5549},"end":{"line":170,"column":24,"offset":5572},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Configuration of the way the server instance logs its actions. Refer to the ","position":{"start":{"line":172,"column":1,"offset":5574},"end":{"line":172,"column":77,"offset":5650},"indent":[]}},{"type":"link","title":null,"url":"/api/utils#logconfig","children":[{"type":"text","value":"Log util documentation","position":{"start":{"line":172,"column":78,"offset":5651},"end":{"line":172,"column":100,"offset":5673},"indent":[]}}],"position":{"start":{"line":172,"column":77,"offset":5650},"end":{"line":172,"column":123,"offset":5696},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":5574},"end":{"line":172,"column":123,"offset":5696},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":175,"column":1,"offset":5699},"end":{"line":175,"column":31,"offset":5729},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":175,"column":31,"offset":5729}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/home/jeremie/Workspaces/webstorm/projects/harmony/docz/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"harmonyjs-server\"\n    }}>{`HarmonyJS Server`}</h1>\n    <p><inlineCode parentName=\"p\">{`@harmonyjs/server`}</inlineCode>{` handles the creation and runtime of a Node webserver. Under the hood, it uses HapiJS, but there is no\nneed to know HapiJS in order to start using HarmonyJS.`}</p>\n    <p><em parentName=\"p\"><strong parentName=\"em\">{`Note:`}</strong>{` `}<a parentName=\"em\" {...{\n          \"href\": \"https://hapi.dev/\"\n        }}>{`HapiJS`}</a>{` knowledge is necessary to write your own `}<a parentName=\"em\" {...{\n          \"href\": \"/plugins/controllers\"\n        }}>{`Controller Plugins`}</a></em></p>\n    <br />\n    <h2 {...{\n      \"id\": \"server\"\n    }}><inlineCode parentName=\"h2\">{`Server`}</inlineCode></h2>\n    <p><inlineCode parentName=\"p\">{`@harmonyjs/server`}</inlineCode>{` only exports one element, its default export: the `}<inlineCode parentName=\"p\">{`Server`}</inlineCode>{` constructor.`}</p>\n    <p>{`This constructor allows us to create a `}<inlineCode parentName=\"p\">{`Server`}</inlineCode>{` instance, which can be configured to expose our application's webserver.\nA `}<inlineCode parentName=\"p\">{`Server`}</inlineCode>{` instance only has two publicly available methods: the constructor itself, and a `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` function.`}</p>\n    <br />\n    <h3 {...{\n      \"id\": \"servernewserverconfig-config-server\"\n    }}><inlineCode parentName=\"h3\">{`Server::new(`}</inlineCode><a parentName=\"h3\" {...{\n        \"href\": \"#serverconfig\"\n      }}><inlineCode parentName=\"a\">{`ServerConfig`}</inlineCode></a><inlineCode parentName=\"h3\">{`: config): Server`}</inlineCode></h3>\n    <p>{`Constructor to create a new `}<inlineCode parentName=\"p\">{`Server`}</inlineCode>{` instance. It takes a `}<a parentName=\"p\" {...{\n        \"href\": \"#serverconfig\"\n      }}><inlineCode parentName=\"a\">{`ServerConfig`}</inlineCode></a>{` object as parameter\nto configure the instance.`}</p>\n    <p>{`No further initialization steps are executed. To launch the server, use the `}<inlineCode parentName=\"p\">{`Server::start`}</inlineCode>{` method.`}</p>\n    <b style={{\n      display: \"block\",\n      marginBottom: \"-1.5rem\"\n    }}>Sample usage</b>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Server from '@harmonyjs/server'\n\n// Initialize a new Server instance\nconst server = new Server({\n    endpoint: {\n        host: '0.0.0.0',\n        port: 80,\n    },\n})\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"serverstart-promiseboolean\"\n    }}><inlineCode parentName=\"h3\">{`Server::start(): Promise<boolean>`}</inlineCode></h3>\n    <p>{`Initialization function launching the webserver.`}</p>\n    <p>{`This function returns a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` which resolves when the server is done loading.`}</p>\n    <b style={{\n      display: \"block\",\n      marginBottom: \"-1.5rem\"\n    }}>Sample usage</b>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import Server from '@harmonyjs/server'\n\nasync function run() {\n    // Initialize a new Server instance\n    const server = new Server({\n        endpoint: {\n            host: '0.0.0.0',\n            port: 80,\n        },\n    })\n\n    console.log('Launching the server...')\n\n    // Start our server\n    try {\n        await server.start()\n\n        console.log('Server launched!')\n    }\n    catch (err) {\n        console.log('An error occurred while launching the server')\n        console.error(err)\n    }\n}\n\nrun()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"serverconfig\"\n    }}><inlineCode parentName=\"h2\">{`ServerConfig`}</inlineCode></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`ServerConfig`}</inlineCode>{` object allows us to configure the server before running it. Here are the available options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type ServerConfig = {\n  endpoint?: {\n    host: string,\n    port: number,\n  },\n  authentication?: {\n    secret: string,\n    validate?: (any) => Promise<boolean>,\n  },\n  cluster?: {\n    forks?: {\n      size?: number,\n      header?: string,\n      proxy?: boolean,\n    },\n    redis: boolean | {\n      key?: string,\n      host?: string,\n      port?: number,\n    },\n  },\n  controllers?: Controller[],\n  log?: LogConfig,\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"serverconfigendpoint\"\n    }}><inlineCode parentName=\"h3\">{`ServerConfig::endpoint`}</inlineCode></h3>\n    <p>{`The optional endpoint field allows us to choose the host and port to run or server on. Omitting this field will launch\na server on `}<inlineCode parentName=\"p\">{`localhost:3000`}</inlineCode>{` by default.`}</p>\n    <p>{`This field takes two subfields, `}<inlineCode parentName=\"p\">{`endpoint.host`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`endpoint.port`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"serverconfigauthentication\"\n    }}><inlineCode parentName=\"h3\">{`ServerConfig::authentication`}</inlineCode></h3>\n    <p>{`This optional field handles the built-in JWT-authentication scheme. It has two subfields: `}<inlineCode parentName=\"p\">{`authentication.secret`}</inlineCode>{`, the\nsecret to use to sign the JWT tokens emitted from the application, and `}<inlineCode parentName=\"p\">{`authentication.validate`}</inlineCode>{`, an optional function\nwhich receives the decoded token before each requests and returns a `}<inlineCode parentName=\"p\">{`Promise`}</inlineCode>{` resolving to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` to indicate\nwhether the token is considered valid or not.`}</p>\n    <p><em parentName=\"p\"><strong parentName=\"em\">{`Note:`}</strong>{` the `}<inlineCode parentName=\"em\">{`validate`}</inlineCode>{` function is the responsibility of the application and arrives`}</em>{` after `}<em parentName=\"p\">{`the signature check`}</em></p>\n    <h3 {...{\n      \"id\": \"serverconfigcluster\"\n    }}><inlineCode parentName=\"h3\">{`ServerConfig::cluster`}</inlineCode></h3>\n    <p>{`The cluster configuration define how the app should handle replication, either locally using Node's forking system, or\nacross multiple machines such as in a Kubernetes environment.`}</p>\n    <h4 {...{\n      \"id\": \"serverconfigclusterforks\"\n    }}><inlineCode parentName=\"h4\">{`ServerConfig::cluster::forks`}</inlineCode></h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster.forks`}</inlineCode>{` subfield allows to configure how our application should split across multiple forks.`}</p>\n    <p>{`Under the hood, HarmonyJS uses Socket.IO for client->server communication. Forks parameters allow to insure a socket connection\nis always forwarded to the correct server.`}</p>\n    <p>{`It takes three optional parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`size`}</inlineCode>{`: the number of instances to run. If lower than 2, then no forks are created. Defaults to `}<inlineCode parentName=\"li\">{`1`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`header`}</inlineCode>{`: the header containing the real user IP address. Useful if used behind a proxy. Defaults to `}<inlineCode parentName=\"li\">{`'x-forwarded-for'`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`proxy`}</inlineCode>{`: tells if the application is running behind a proxy. Defaults to `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"serverconfigclusterredis\"\n    }}><inlineCode parentName=\"h4\">{`ServerConfig::cluster::redis`}</inlineCode></h4>\n    <p>{`The `}<inlineCode parentName=\"p\">{`cluster.redis`}</inlineCode>{` subfield allows to configure our application for working on a clustered environment, such as Kubernetes.`}</p>\n    <p>{`Under the hood, HarmonyJS uses Socket.IO for client->server communication. Redis parameters allow to insure that messages\nare spread to all clients, whichever the emitting server, and vice-versa.`}</p>\n    <p>{`It takes three optional parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{`: the identifier of the Redis sync cache. Defaults to `}<inlineCode parentName=\"li\">{`'harmony'`}</inlineCode>{`. `}<br />{`\nUse this key if you intend to run multiple HarmonyJS applications on the same cluster or using the same Redis server.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`host`}</inlineCode>{`: the hostname on which to access the Redis server. Defaults to `}<inlineCode parentName=\"li\">{`'localhost'`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`port`}</inlineCode>{`: the port on which the Redis server is running. Defaults to `}<inlineCode parentName=\"li\">{`6379`}</inlineCode>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"serverconfigcontrollers\"\n    }}><inlineCode parentName=\"h3\">{`ServerConfig::controllers`}</inlineCode></h3>\n    <p>{`The controllers array contains a list of Controllers. Controllers are HarmonyJS plugins allowing to describe how to handle\nspecific routes, such as serving a static directory, routing to an SPA or exposing a GraphQL endpoint.`}</p>\n    <p>{`To find more information about Controllers, refer to `}<a parentName=\"p\" {...{\n        \"href\": \"/plugins/controllers\"\n      }}>{`their documentation`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"serverconfiglog\"\n    }}><inlineCode parentName=\"h3\">{`ServerConfig::log`}</inlineCode></h3>\n    <p>{`Configuration of the way the server instance logs its actions. Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"/api/utils#logconfig\"\n      }}>{`Log util documentation`}</a></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}